using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using AVLTree.Enum;

namespace AVLTree.Tests.AVLTree
{
    public abstract class Base
    {
        public AvlTree<int> AvlTree { get { return GenerateTree(Items);} }
        public AvlTree<int> AvlTreeInsertFixUpCase1AItems {  get { return GenerateTree(InsertFixUpCase1AItems);} }
        public AvlTree<int> AvlTreeInsertFixUpCase1BItems {  get { return GenerateTree(InsertFixUpCase1BItems);} }
        public AvlTree<int> AvlTreeInsertFixUpCase2AItems { get { return GenerateTree(InsertFixUpCase2AItems); } }
        public AvlTree<int> AvlTreeInsertFixUpCase2BItems { get { return GenerateTree(InsertFixUpCase2BItems); } }
        public AvlTree<int> AvlTreeDeleteFixUpCase1AItems { get { return GenerateTree(DeleteFixUpCase1AItems); } }
        public AvlTree<int> AvlTreeDeleteFixUpCase1BItems { get { return GenerateTree(DeleteFixUpCase1BItems); } }
        public AvlTree<int> AvlTreeDeleteFixUpCase2AItems { get { return GenerateTree(DeleteFixUpCase2AItems); } }
        public AvlTree<int> AvlTreeDeleteFixUpCase2BItems { get { return GenerateTree(DeleteFixUpCase2BItems); } }

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // AVL Tree:          
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Key references when working with trees:
        //+-------------------------------------------------------------------------------------------------------------------------+
        // c        = current (current)
        // p        = parent (current.parent)
        // gp       = grandparent (current.parent.parent)
        // s        = sibling (current.parent.left/right)
        // lc       = left child (current.left)
        // rc       = right child (current.right)
        // u        = uncle (current.parent.parent.left/right) 
        // b        = black (redblack tree only)
        // r        = red (redblack tree only)
        // nil      = null / sentinel
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Balancing properties:
        //+-------------------------------------------------------------------------------------------------------------------------+
        // 1. Every node has properties to determine their right and left height
        // 2. Every node can be left, right heavy or balanced
        // 3. Every node has a balance property to indicate the difference in height between right and left
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, forming a AVL Tree:             
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| AVL Tree                              ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||                                       ||                                       |
        //|           /               \           ||                                       ||                                       |
        //|          20                80         ||                                       ||                                       |
        //|        /   \             /   \        ||                                       ||                                       |
        //|       /     \           /     \       ||                                       ||                                       |
        //|      10      40        70      90     ||                                       ||                                       |
        //|     / \     / \       / \     / \     ||                                       ||                                       |
        //|    /   \   /   \     /   \   /   \    ||                                       ||                                       |
        //|    5   15 35   45   65   75 85   95   ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] Items = { 50, 20, 80, 10, 40, 70, 90, 5, 15, 35, 45, 65, 75, 85, 95 };

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Tree Rotations:            
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Left Rotation: 
        // Please note, these examples do not show the parent reference corrections required, please see the code for details.           
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Left rotation                         || Split old root and new root           || Move new root left child              |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||                                       ||                                       |
        //|           /               \           ||                                       ||                                       |
        //|         nil                80         ||          50                80         ||          50                80         |
        //|                          /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|                         /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|                        70      90     ||     nil     nil        70      90     ||     nil      70       nil      90     |
        //|                       / \     / \     ||                       / \     / \     ||             / \               / \     |
        //|                      /   \   /   \    ||                      /   \   /   \    ||            /   \             /   \    |
        //|                     65   75 85   95   ||                     65   75 85   95   ||           65   75           85   95   |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| unbalanced tree                       || n=50 (is old root), n=80 (is new root)|| new root.lc = old root.rc             |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Left rotation ... continued           ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 80+---+\            ||                                       ||                                       |
        //|           /               \           ||                                       ||                                       |
        //|          50                90         ||                                       ||                                       |
        //|        /   \             /   \        ||                                       ||                                       |
        //|       /     \           /     \       ||                                       ||                                       |
        //|     nil      70        85      95     ||                                       ||                                       |
        //|             / \                       ||                                       ||                                       |
        //|            /   \                      ||                                       ||                                       |
        //|           65   75                     ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| new root.lc = old root                ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Right Rotation:
        // Please note, these examples do not show the parent reference corrections required, please see the code for details.              
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Right rotation                        || Split old root and new root           || Move new root right child             |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||                                       ||                                       |
        //|           /               \           ||                                       ||                                       |
        //|          20               nil         ||          20                50         ||          20                50         |
        //|        /   \                          ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \                         ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40                       ||      10      40       nil     nil     ||      10     nil        40     nil     |
        //|     / \     / \                       ||     / \     / \                       ||     / \               / \             |
        //|    /   \   /   \                      ||    /   \   /   \                      ||    /   \             /   \            |
        //|    5   15 35   45                     ||    5   15 35   45                     ||    5   15           35   45           |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| unbalanced tree                       || n=50 (is old root), n=20 (is new root)|| new root.rc = old root.lc             |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Right rotation ... continued          ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 20+---+\            ||                                       ||                                       |
        //|           /               \           ||                                       ||                                       |
        //|          10                50         ||                                       ||                                       |
        //|        /   \             /   \        ||                                       ||                                       |
        //|       /     \           /     \       ||                                       ||                                       |
        //|       5      15        40     nil     ||                                       ||                                       |
        //|                       / \             ||                                       ||                                       |
        //|                      /   \            ||                                       ||                                       |
        //|                     35   45           ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| new root.rc = old root                ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Traversal:
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // PreOrder Traversal: 
        // 1. Process node 
        // 2. Go left
        // 3. Go right
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsPreOrder = { 50, 20, 10, 5, 15, 40, 35, 45, 80, 70, 65, 75, 90, 85, 95 };

        //+-------------------------------------------------------------------------------------------------------------------------+
        // InOrder Traversal: 
        // 1. Go left 
        // 2. Process node
        // 3. Go right
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsInOrder = { 5, 10, 15, 20, 35, 40, 45, 50, 65, 70, 75, 80, 85, 90, 95 };

        //+-------------------------------------------------------------------------------------------------------------------------+
        // PostOrder Traversal: 
        // 1. Go left 
        // 2. Go right
        // 3. Process node
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsPostOrder = { 5, 15, 10, 35, 45, 40, 20, 65, 75, 70, 85, 95, 90, 80, 50 };

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Insert:
        // 1. If new node's value < parent node's value go left
        // 2. If new node's value = parent node's value go right
        // 3. If new node's value > parent node's value go right
        // Continue until nil is found then insert new node, correct tree balancing after insert
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Insert less than parent               || Insert equal to parent                || Insert greater than parent            |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \             /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||      10      40        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||     / \     / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   |
        //|                                 /     ||                                   \   ||                                   \   |
        //|                                /      ||                                    \  ||                                    \  |
        //|                               94      ||                                    95 ||                                    96 |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int ItemsInsertLessThanParent = 94;

        public int ItemsInsertEqualToParent = 95;

        public int ItemsInsertGreaterThanParent = 96;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Insert Tree Balancing:
        // 1. Determine tree state:
        //  
        //          Case 1: If LeftHeight - RightHeight > 1 ... tree is left heavy
        //          Case 2: If RightHeight - LeftHeight > 1 ... tree is right heavy
        //          Case 3: Else ... tree is balanced
        //
        // 2. Based on tree state:
        //
        //          Case 1: Tree is left heavy:
        //                  A. If node.Left.BalancingFactor > 0, do RotateLeft(node.Left) & RotateRight(node)
        //                  B. Else RotateRight(node)
        //
        //          Case 2: Tree is right heavy:
        //                  A. If node.Right.BalancingFactor < 0, do RotateRight(node.Right) & RotateLeft(node)
        //                  B. Else RotateLeft(node)
        //
        //          Case 3: Tree is balanced, no balancing required
        //
        // Traversing up the recursive path will look for additional imbalances and balance accordinly.
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 1 A: Tree is left heavy & node.Left.BalancingFactor > 0
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 1 A (inserted node=35)           || RotateLeft Node.Left                  || RotateRight Node                      |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 40+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          40                80         ||          20                50         |
        //|        /   \                          ||        /                              ||        /   \                 \        |
        //|       /     \                         ||       /                               ||       /     \                 \       |
        //|      10      40                       ||      20                               ||      10     35                 80     |
        //|             /                         ||     / \                               ||                                       |
        //|            /                          ||    /   \                              ||                                       |
        //|            35                         ||    10  35                             ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| leftheavy @ n=50                      ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] InsertFixUpCase1AItems = { 50, 20, 80, 10, 40 };
        public int InsertFixUpCase1AItem = 35;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 1 B: Tree is left heavy
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 1 B (inserted node = 5)          || RotateRight Node                      ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 20+---+\            ||                                       |
        //|           /               \           ||           /               \           ||                                       |
        //|          20                80         ||          10                50         ||                                       |
        //|        /   \                          ||        /                 /   \        ||                                       |
        //|       /     \                         ||       /                 /     \       ||                                       |
        //|      10      40                       ||       5                40      80     ||                                       |
        //|     /                                 ||                                       ||                                       |
        //|    /                                  ||                                       ||                                       |
        //|    5                                  ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| leftheavy @ n=50                      ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] InsertFixUpCase1BItems = { 50, 20, 80, 10, 40 };
        public int InsertFixUpCase1BItem = 5;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 2 A: Tree is right heavy & node.Right.BalancingFactor < 0
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 2 A (inserted node = 75)         || RotateRight Node.Right                || RotateLeft Node                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 70+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                70         ||          50                80         |
        //|                          /   \        ||                              \        ||        /                 /   \        |
        //|                         /     \       ||                               \       ||       /                 /     \       |
        //|                        70      90     ||                                80     ||      20                75      90     |
        //|                         \             ||                               / \     ||                                       |
        //|                          \            ||                              /   \    ||                                       |
        //|                          75           ||                             75   90   ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| rightheavy @ n=50                     ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] InsertFixUpCase2AItems = { 50, 20, 80, 70, 90 };
        public int InsertFixUpCase2AItem = 75;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 2 B: Tree is right heavy
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 2 B (inserted node = 95)         || RotateLeft Node                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 80+---+\            ||                                       |
        //|           /               \           ||           /               \           ||                                       |
        //|          20                80         ||          50                90         ||                                       |
        //|                          /   \        ||        /   \                 \        ||                                       |
        //|                         /     \       ||       /     \                 \       ||                                       |
        //|                        70      90     ||      20      70                95     ||                                       |
        //|                                 \     ||                                       ||                                       |
        //|                                  \    ||                                       ||                                       |
        //|                                  95   ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| rightheavy @ n=50                     ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] InsertFixUpCase2BItems = { 50, 20, 80, 70, 90 };
        public int InsertFixUpCase2BItem = 95;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Delete Tree Balancing:
        // Deleting from a AVL Tree follows the same procedures as inserting but will not traverse the tree structure. Balancing only
        // occurs at deleted node's parent.parent or if that is null (and root is not null) the root.
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 1 A: Tree is left heavy & node.Left.BalancingFactor > 0
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 1 A (deleted node = 70)          || RotateLeft Node.Left                  || RotateRight Node                      |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 40+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          40                80         ||          20                50         |
        //|        /   \             /            ||        /                              ||        /   \                 \        |
        //|       /     \           /             ||       /                               ||       /     \                 \       |
        //|      10      40        70             ||      20                               ||      10     35                 80     |
        //|             /                         ||     / \                               ||                                       |
        //|            /                          ||    /   \                              ||                                       |
        //|            35                         ||    10  35                             ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| leftheavy @ n=50                      ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteFixUpCase1AItems = { 50, 20, 80, 10, 40, 70, 35 };
        public int DeleteFixUpCase1AItem = 70;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 1 B: Tree is left heavy
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 1 B (deleted node = 70)          || RotateRight Node                      ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 20+---+\            ||                                       |
        //|           /               \           ||           /               \           ||                                       |
        //|          20                80         ||          10                50         ||                                       |
        //|        /   \             /            ||        /                 /   \        ||                                       |
        //|       /     \           /             ||       /                 /     \       ||                                       |
        //|      10      40        70             ||       5                40      80     ||                                       |
        //|     /                                 ||                                       ||                                       |
        //|    /                                  ||                                       ||                                       |
        //|    5                                  ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| leftheavy @ n=50                      ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteFixUpCase1BItems = { 50, 20, 80, 10, 40, 70, 5 };
        public int DeleteFixUpCase1BItem = 70;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 2 A: Tree is right heavy & node.Right.BalancingFactor < 0
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 2 A (deleted node = 10)          || RotateRight Node.Right                || RotateLeft Node                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 70+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                70         ||          50                80         |
        //|        /                 /   \        ||                              \        ||        /                 /   \        |
        //|       /                 /     \       ||                               \       ||       /                 /     \       |
        //|      10                70      90     ||                                80     ||      20                75      90     |
        //|                         \             ||                               / \     ||                                       |
        //|                          \            ||                              /   \    ||                                       |
        //|                          75           ||                             75   90   ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| rightheavy @ n=50                     ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteFixUpCase2AItems = { 50, 20, 80, 10, 70, 90, 75 };
        public int DeleteFixUpCase2AItem = 10;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Case 2 B: Tree is right heavy
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Case 2 B (deleted node = 10)          || RotateLeft Node                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 80+---+\            ||                                       |
        //|           /               \           ||           /               \           ||                                       |
        //|          20                80         ||          50                90         ||                                       |
        //|        /                 /   \        ||        /   \                 \        ||                                       |
        //|       /                 /     \       ||       /     \                 \       ||                                       |
        //|      10                70      90     ||      20      70                95     ||                                       |
        //|                                 \     ||                                       ||                                       |
        //|                                  \    ||                                       ||                                       |
        //|                                  95   ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| rightheavy @ n=50                     ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] DeleteFixUpCase2BItems = { 50, 20, 80, 10, 70, 90, 95 };
        public int DeleteFixUpCase2BItem = 10;

        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Contains and Search:
        // Using binary tree structure navigate by follow the tree's rules (mentioned above) to locate value
        //+-------------------------------------------------------------------------------------------------------------------------+
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int ItemsSearchSucceeds = 90;

        public int ItemsSearchFails = 100;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Minimum and Maximum:
        // 1. Minimum, while left is not null keep going left
        // 2. Maximum, while right is not null keep going right
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int ItemsSearchMinimum = 5;

        public int ItemsSearchMaximum = 95;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Successor:
        // 1. If node.right is not null return Minimum(node.right)
        // 2. If node.right is null, traverse upwards until either current node = null or current node != parent.right
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Successor node.right != null          || Successor node.right == null          || No successor                          |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \             /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||      10      40        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||     / \     / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 80, successor = 85             || node = 85, successor = 90             || node = 95, successor = null           |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsSearchSuccessorSucceeds = { 80, 85 };

        public int ItemsSearchSuccessorFails = 95;

        //+-------------------------------------------------------------------------------------------------------------------------+
        // Items, Predecessor:
        // 1. If node.left is not null return Maximum(node.left)
        // 2. If node.left is null, traverse upwards until either current node = null or current node != parent.left
        //+-------------------------------------------------------------------------------------------------------------------------+

        //+-------------------------------------------------------------------------------------------------------------------------+
        //| Predecessor node.left != null         || Predecessor node.left == null         || No predecessor                        |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //|                                       ||                                       ||                                       |
        //|            /+---+ 50+---+\            ||            /+---+ 50+---+\            ||            /+---+ 50+---+\            |
        //|           /               \           ||           /               \           ||           /               \           |
        //|          20                80         ||          20                80         ||          20                80         |
        //|        /   \             /   \        ||        /   \             /   \        ||        /   \             /   \        |
        //|       /     \           /     \       ||       /     \           /     \       ||       /     \           /     \       |
        //|      10      40        70      90     ||      10      40        70      90     ||      10      40        70      90     |
        //|     / \     / \       / \     / \     ||     / \     / \       / \     / \     ||     / \     / \       / \     / \     |
        //|    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    ||    /   \   /   \     /   \   /   \    |
        //|    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   ||    5   15 35   45   65   75 85   95   |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //|                                       ||                                       ||                                       |
        //+-------------------------------------------------------------------------------------------------------------------------+
        //| node = 10, predecessor = 5            || node = 15, predecessor = 10           || node = 5, predecessor = null          |
        //+-------------------------------------------------------------------------------------------------------------------------+

        public int[] ItemsSearchPredecessorSucceeds = { 10, 5 };

        public int ItemsSearchPredecessorFails = 5;

        //+-------------------------------------------------------------------------------------------------------------------------+

        public AvlTree<int> GenerateTree(int[] items)
        {
            var tree = new AvlTree<int>();
            foreach (var item in items)
            {
                tree.Insert(item);
            }

            return tree;
        }

        public AvlTree<int> GenerateRandomTree(List<Operations> operations)
        {
            var tree = new AvlTree<int>();

            var random = new Random();
            var totalItemsInsert = random.Next(1, 100);
            var totalItemsDelete = random.Next(1, 50);

            var items = new int[totalItemsInsert];

            RandomTreeInsertOperations(tree, items, totalItemsInsert, operations);

            RandomTreeDeleteOperations(tree, items, totalItemsInsert, totalItemsDelete, operations);

            return tree;
        }

        private void RandomTreeInsertOperations(AvlTree<int> tree, int[] items, int totalItemsInsert, List<Operations> operations)
        {
            var random = new Random();

            for (int i = 0; i < totalItemsInsert; i++)
            {
                int item;

                do
                {
                    item = random.Next(1, 500);
                } while (items.Contains(item));

                tree.Insert(item);

                items[i] = item;

                operations.Add(new Operations() { Op = Operation.Insert, Value = item});
            }
        }

        private void RandomTreeDeleteOperations(AvlTree<int> tree, int[] items, int totalItemsInsert, int totalItemsDelete, List<Operations> operations)
        {
            var random = new Random();

            for (int i = 0; i < totalItemsDelete; i++)
            {
                var index = random.Next(totalItemsInsert - 1);
                var item = items[index];

                var node = tree.Search(item);

                if (node != null)
                {
                    tree.Delete(node);
                    items[index] = 0;

                    operations.Add(new Operations() { Op = Operation.Delete, Value = item });
                }
            }
        }

        public class Operations
        {
            public Operation Op { get; set; }

            public int Value { get; set; }
        }

        public enum Operation
        {
            Insert,
            Delete
        }
    }
}
